/*
 * Copyright 2020 Zeppelin Bend Pty Ltd
 * This file is part of evolve-sdk-jvm.
 *
 * evolve-sdk-jvm is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * evolve-sdk-jvm is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with evolve-sdk-jvm.  If not, see <https://www.gnu.org/licenses/>.
 */
package com.zepben.cimbend.network.tracing;

import com.zepben.annotations.EverythingIsNonnullByDefault;
import com.zepben.cimbend.cim.iec61970.base.core.ConductingEquipment;
import com.zepben.cimbend.cim.iec61970.base.wires.SinglePhaseKind;
import com.zepben.cimbend.cim.iec61970.base.wires.Switch;

import javax.annotation.Nullable;

/**
 * Functional interface that can be used by traces to specify what kind of open conditions to test on.
 * See {@link PhaseTrace} for example usage.
 */
@EverythingIsNonnullByDefault
public interface OpenTest {

    // Constant common implements of OpenTest
    OpenTest CURRENTLY_OPEN = (conductingEquipment, phase) -> !conductingEquipment.getInService() || ((conductingEquipment instanceof Switch) && ((Switch) conductingEquipment).isOpen(phase));
    OpenTest NORMALLY_OPEN = (conductingEquipment, phase) -> !conductingEquipment.getNormallyInService() || ((conductingEquipment instanceof Switch) && ((Switch) conductingEquipment).isNormallyOpen(phase));
    OpenTest IGNORE_OPEN = (conductingEquipment, phase) -> false;

    boolean isOpen(ConductingEquipment conductingEquipment, @Nullable SinglePhaseKind phase);

}
