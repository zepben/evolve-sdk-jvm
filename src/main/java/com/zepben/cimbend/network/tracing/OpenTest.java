/*
 * Copyright 2020 Zeppelin Bend Pty Ltd
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 */
package com.zepben.cimbend.network.tracing;

import com.zepben.annotations.EverythingIsNonnullByDefault;
import com.zepben.cimbend.cim.iec61970.base.core.ConductingEquipment;
import com.zepben.cimbend.cim.iec61970.base.wires.SinglePhaseKind;
import com.zepben.cimbend.cim.iec61970.base.wires.Switch;

import javax.annotation.Nullable;

/**
 * Functional interface that can be used by traces to specify what kind of open conditions to test on.
 * See {@link PhaseTrace} for example usage.
 */
@EverythingIsNonnullByDefault
public interface OpenTest {

    // Constant common implements of OpenTest
    OpenTest CURRENTLY_OPEN = (conductingEquipment, phase) -> !conductingEquipment.getInService() || ((conductingEquipment instanceof Switch) && ((Switch) conductingEquipment).isOpen(phase));
    OpenTest NORMALLY_OPEN = (conductingEquipment, phase) -> !conductingEquipment.getNormallyInService() || ((conductingEquipment instanceof Switch) && ((Switch) conductingEquipment).isNormallyOpen(phase));
    OpenTest IGNORE_OPEN = (conductingEquipment, phase) -> false;

    boolean isOpen(ConductingEquipment conductingEquipment, @Nullable SinglePhaseKind phase);

}
